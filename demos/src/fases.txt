Resumen
Tipos de pruebas

Conceptos

SUT (System Under Test): Sujeto Bajo Prueba, por ejemplo, Person ser√≠a nuestro SUT, no necesariamente tiene que ser un sistema.

Validar: A la hora de validar resolvemos la siguiente pregunta: ¬øestamos construyendo el sistema correcto?, por lo general, en la capa
de requerimientos con el cliente y si le da valor a √©l.


Verificar: Cuando ya se hacen pruebas, se verifica teniendo en mente la pregunta:
¬øestamos construyendo el sistema correctamente?
casi obviando que ya se produce valor al cliente.


En todas las capas se pueden hacer pruebas, incluso sin c√≥digo, como en los UML o en la revisi√≥n con el equipo de Scrum.
.
Tabla capas Vs detalle
.

Pruebas Funcionales
Son las que validan que se cumplan los requerimientos de valor para el cliente
(como guardar bien los buenos datos de un usuario); hasta este punto es lo que hemos hecho en VS code.
Por norma general, las pruebas unitarias las entrega el desarrollador, el tester se
empieza a involucrar en las pruebas de integraci√≥n o E2E.


Pruebas No Funcionales
Verifican m√°s el √≥ptimo manejo de los recursos del software, no el cumplimiento de requisitos
pers√©, como lo son pruebas de: +rendimiento +carga o estabilidad +estr√©s +usabilidad +seguridad.
Estas pruebas no necesariamente deben estar desde el principio.


NOTA: HAy una nueva √°rea de pruebas No Funcionales que se
llama üêí Ingenier√≠a del caos, üêí su pionero es Netflix.
Consiste en desconectar servicios en producci√≥n, como por ejemplo,
desconectar una BD para ver como reacciona el equipo y establecer soluciones.
‚õî ¬°*Es muy pegrilossoo, MUY PEGRILOOSSOO!! ‚õî



***************************************************** Resumen ******************************************************

Metodolog√≠as

TDD (Test Driven Development): Desarrollo guiado por pruebas, donde primero se hacen las pruebas antes de escribir el c√≥digo (primero los "expects").

BDD (Behavior Driven Development): Desarrollo guiado por comportamiento de acuerdo a los requisitos y luego las pruebas.

Mantra "AAA" para hacer pruebas

Arrange | Given: Preparar, dado algo.

Act | When: Ejecutar, cuando.

Assert | Then: Resolver hip√≥tesis, entonces.

Conceptos

Falso Positivo: Cuando una prueba indica un error, pero todo est√° bien.
Por ejemplo, al probar el m√©todo de suma de 1 + 1 y poner el "expect" en 5,
es un falso positivo. En este caso, la prueba est√° mal.

Falso Negativo: Son m√°s comunes, ya que parece que todo est√° normal, pero
no se ha identificado el error. El conjunto de pruebas deber√≠a ser m√°s amplio.
Esto sucede cuando solo probamos el "Happy Path", es decir, las condiciones en las que sabemos que el sistema funciona.
Por ejemplo, en el Sistema √önico de Test (SUT) de dividir,
las primeras pruebas salieron bien porque no se tom√≥ en cuenta la divisi√≥n entre cero (0),
luego se hizo la prueba y el refactor. En caso de falso negativo, lo mejor es aplicar TDD.

Sistema Legacy: Son sistemas que requieren agregar pruebas a algo funcional, incluso en paralelo.
En estos casos, es necesario refactorizar los m√©todos enormes en m√©todos m√°s peque√±os para realizar pruebas
unitarias. Los sistemas legacy a menudo carecen de una buena arquitectura.

Clean Architecture: Este patr√≥n lleva buenas pr√°cticas desde el principio.
Cada m√©todo est√° bien dividido y con responsabilidades adecuadas, lo que facilita la adici√≥n de un conjunto de pruebas.
